# Disable SELinux.
setenforce 0
sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux

# Enable the br_netfilter module for cluster communication.
modprobe br_netfilter
echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables
echo '1' > /proc/sys/net/ipv4/ip_forward

# Ensure that the Docker dependencies are satisfied.
yum install -y yum-utils device-mapper-persistent-data lvm2

# Add the Docker repo and install Docker.
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum install -y docker-ce

# disable "disabled_plugins = ["cri"]"
cat /etc/containerd/config.toml 
sed -i -e "s/^disabled_plugins/#disabled_plugins/" /etc/containerd/config.toml 

# Set the cgroup driver for Docker to systemd, then reload systemd, enable and start Docker
sed -i '/^ExecStart/ s/$/ --exec-opt native.cgroupdriver=systemd/' /usr/lib/systemd/system/docker.service
systemctl daemon-reload
systemctl enable docker --now

# Add the repo for Kubernetes.
cat << EOF > /etc/yum.repos.d/kubernetes.repo
> [kubernetes]
> name=Kubernetes
> baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
> enabled=1
> gpgcheck=1
> gpgkey=https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
> exclude=kubelet kubeadm kubectl
> EOF
#OR

yum-config-manager --add-repo https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
# Add below lines
gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

# Install Kubernetes.
yum install -y kubelet kubeadm kubectl
#open FW for below ports
sudo firewall-cmd --permanent --add-port=6443/tcp
sudo firewall-cmd --permanent --add-port=2379-2380/tcp
sudo firewall-cmd --permanent --add-port=10250/tcp
sudo firewall-cmd --permanent --add-port=10251/tcp
sudo firewall-cmd --permanent --add-port=10252/tcp
sudo firewall-cmd --permanent --add-port=179/tcp
sudo firewall-cmd --permanent --add-port=4789/udp
sudo firewall-cmd --permanent --add-port=6783/udp
sudo firewall-cmd --permanent --add-port=6784/udp
sudo firewall-cmd --permanent --add-port=10255/tcp
sudo firewall-cmd --permanent --add-port=5473/tcp
sudo firewall-cmd --permanent --add-masquerade
sudo firewall-cmd --reload


# Enable the kubelet service. The kubelet service will fail to start until the cluster is initialized, this is expected.
systemctl enable kubelet

                            Complete the following section on the MASTER ONLY!
# Initialize the cluster using the IP range for Flannel.
kubeadm init --pod-network-cidr=10.244.0.0/16

# multiple interface
 kubeadm init --apiserver-advertise-address=<host_only_adaptop_IP 
# multi node installation
kubeadm init --apiserver-advertise-address=192.168.1.200 --control-plane-endpoint=192.168.1.210:6443 \
--pod-network-cidr=30.0.0.0/16 --upload-certs

# Copy the kubeadmn join command output. We will need this later.
  kubeadm join 192.168.1.210:6443 --token 5qlz3q.p592czieztpd4kzr \
	--discovery-token-ca-cert-hash sha256:9bf9d3ff75952706d820adb9e699e7ef9e8bb70ff0fa2a2f09f11a704a9f6fe3 \
	--control-plane --certificate-key 1a44e83b5ade0ffd157d00e0e87b3e6a9a52ec477520ae6a575419297b07152c \
--apiserver-advertise-address=192.168.1.201
Worker node - 
kubeadm join 192.168.1.210:6443 --token 5qlz3q.p592czieztpd4kzr \
	--discovery-token-ca-cert-hash sha256:9bf9d3ff75952706d820adb9e699e7ef9e8bb70ff0fa2a2f09f11a704a9f6fe3 --apiserver-advertise-address=192.168.1.203


# Exit sudo and copy the admin.conf to your home directory and take ownership.
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Deploy Flannel. (For Kubernetes v1.17+) or Weave-net
wget https://raw.githubusercontent.com/flannel-io/flannel/v0.20.2/Documentation/kube-flannel.yml
ustom podCIDR (not 10.244.0.0/16) you first need to download the above manifest and modify the network to match your one.

# Check the cluster state.
kubectl get pods --all-namespaces
Note: Complete the following steps on the NODES ONLY!

# Run the join command that you copied earlier, this requires running the command as sudo on the nodes. Then check your nodes from the master.
kubectl get nodes
crictl config --set runtime-endpoint=unix:///run/containerd/containerd.sock
